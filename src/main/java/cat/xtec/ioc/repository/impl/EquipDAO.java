/** * Classe encarregada de manipular la BD Equips. * * @author: Grup 11 - Xavi, Carlos, Ingrid, Denís * @version:05/2023 */package cat.xtec.ioc.repository.impl;import cat.xtec.ioc.domain.Equip;import java.io.IOException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import java.util.logging.Level;import java.util.logging.Logger;import javax.naming.InitialContext;import javax.naming.NamingException;import org.springframework.stereotype.Repository;import cat.xtec.ioc.repository.EquipRepository;import cat.xtec.ioc.service.impl.EquipServiceImpl;@Repositorypublic class EquipDAO implements EquipRepository {    private Dbconnection dBConnection;    private Connection connection;    public EquipDAO(Dbconnection dBConnection) {        this.dBConnection = dBConnection;    }    public EquipDAO() {        try {            dBConnection = (Dbconnection) new InitialContext().lookup("java:global/PROJECTE/Dbconnection");            dBConnection.setConnectionFile("db.properties");        } catch (NamingException ex) {            Logger.getLogger(EquipServiceImpl.class.getName()).log(Level.SEVERE, null, ex);        }    }    /**     * OBTENIR EQUI PER CODI     *     * @param codi     * @return Un únic equip mitjançant el codi.     * @throws Exception     */    @Override    public Equip getEquipByCodi(String codi) throws Exception {        String qry = "select * from equips where codi ='" + codi + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        return findUniqueResult(preparedStatement);    }    /**     * OBTENIR EQUIP PER TIPUS     *     * @deprecated     * @param tipus     * @return     * @throws Exception     */    @Override    public Equip getEquipByTipus(String tipus) throws Exception {        String qry = "select * from equips where tipus ='" + tipus + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        return findUniqueResult(preparedStatement);    }    /**     * OBTENIR EQUIP PER NUMERO DE SERIE     *     * @deprecated     * @param numserie     * @return     * @throws Exception     */    @Override    public Equip getEquipByNumSerie(String numserie) throws Exception {        String qry = "select * from equips where numserie ='" + numserie + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        System.out.println(findUniqueResult(preparedStatement));        return findUniqueResult(preparedStatement);    }    /**     * OBTENIR EQUIP EN FUNCIO DE L'ESTAT (Servei, Stock, Reparació)     *     * @param estat     * @return equip     * @throws Exception     */    @Override    public List<Equip> getEquipByEstat(String estat) throws Exception {        String qry = "select * from equips where estat ='" + estat + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        List<Equip> equipsStock = executeQuery(preparedStatement);        return equipsStock;    }    /**     * OBTENIR LLISTAT D'EQUIPS.     *     * @return     * @throws SQLException     */    @Override    public List<Equip> getAllEquips() throws SQLException {        String qry = "select * from equips";        PreparedStatement preparedStatement = getPreparedStatement(qry);        List<Equip> equips = executeQuery(preparedStatement);        return equips;    }    /**     * OBTENIR LLISTAT D'EQUIPS PER MARCA     *     * @deprecated     * @param marca     * @return     * @throws Exception     */    @Override    public List<Equip> getEquipsByMarca(String marca) throws Exception {        String qry = "select * from equips where marca ='" + marca + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        List<Equip> equips = executeQuery(preparedStatement);        return equips;    }    /**     * OBTENIR EL CODI DE L'ESPAI ON S'HA ASSIGNAT L'EQUIP     *     * @param codiEquip     * @return codiEspai     * @throws Exception     */    @Override    public String getCodiEspaiAssignat(String codiEquip) throws Exception {        String qry = "select codiespai FROM espais_equips WHERE codiequip ='" + codiEquip + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        ResultSet resultSet = preparedStatement.executeQuery();        while (resultSet.next()) {            String codiEspai = resultSet.getString("codiespai");            return codiEspai;        }        return null;    }    /**     * AFEGIR NOU EQUIP     *     * @param equip     * @throws Exception     */    @Override    public void addEquip(Equip equip) throws Exception {        String qry = "INSERT INTO equips(codi,tipus,numserie,marca,model,estat) VALUES (?,?,?,?,?,?)";        PreparedStatement preparedStatement = getPreparedStatement(qry);        preparedStatement.setString(1, equip.getCodi());        preparedStatement.setString(2, equip.getTipus());        preparedStatement.setString(3, equip.getNumserie());        preparedStatement.setString(4, equip.getMarca());        preparedStatement.setString(5, equip.getModel());        preparedStatement.setString(6, equip.getEstat());        createOrUpdateEquip(equip.getCodi(), preparedStatement);    }    /**     * ACTUALITZAR UN EQUIP     *     * @param equip     * @throws Exception     */    @Override    public void updateEquip(Equip equip) throws Exception {        String qry = "DELETE FROM equips WHERE codi = '" + equip.getCodi() + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        createOrUpdateEquip(equip.getCodi(), preparedStatement);        addEquip(equip);    }    /**     * ELIMINAR UN EQUIP     *     * @param equip     * @throws Exception     */    @Override    public void deleteEquip(Equip equip) throws Exception {        String qry = "DELETE FROM equips WHERE codi = '" + equip.getCodi() + "'";        PreparedStatement preparedStatement = getPreparedStatement(qry);        createOrUpdateEquip(equip.getCodi(), preparedStatement);    }    private Equip createOrUpdateEquip(String codi, PreparedStatement preparedStatement) throws Exception {        int result = executeUpdateQuery(preparedStatement);        return getEquipByCodi(codi);    }    private Equip findUniqueResult(PreparedStatement preparedStatement) throws Exception {        List<Equip> equips = executeQuery(preparedStatement);        if (equips.isEmpty()) {            return null;        }        if (equips.size() > 1) {            throw new Exception("Only one result expected");        }        return equips.get(0);    }    private List<Equip> executeQuery(PreparedStatement preparedStatement) {        List<Equip> equips = new ArrayList<Equip>();        try (                ResultSet rs = preparedStatement.executeQuery()) {            while (rs.next()) {                Equip equip = buildEquipFromResultSet(rs);                equips.add(equip);            }        } catch (SQLException e) {            e.printStackTrace();        }        return equips;    }    private PreparedStatement getPreparedStatement(String query) throws SQLException {        if (getConnection() == null) {            try {                setConnection(dBConnection.getConnection());            } catch (SQLException | IOException e) {                e.printStackTrace();            }        }        return getConnection().prepareStatement(query);    }    private int executeUpdateQuery(PreparedStatement preparedStatement) {        int resultat = 0;        if (getConnection() == null) {            try {                setConnection(dBConnection.getConnection());;            } catch (SQLException | IOException e) {                e.printStackTrace();            }        }        try {            resultat = preparedStatement.executeUpdate();        } catch (SQLException e) {            e.printStackTrace();        }        return resultat;    }    /**     * INSERIR UN EQUIP A LA BD     *     * @param rs     * @return     * @throws SQLException     */    private Equip buildEquipFromResultSet(ResultSet rs) throws SQLException {        String codi = rs.getString("codi");        String tipus = rs.getString("tipus");        String numserie = rs.getString("numserie");        String marca = rs.getString("marca");        String model = rs.getString("model");        String estat = rs.getString("estat");        Equip equip = new Equip(codi, tipus, numserie, marca, model, estat);        return equip;    }    public Connection getConnection() {        return connection;    }    public void setConnection(Connection connection) {        this.connection = connection;    }}